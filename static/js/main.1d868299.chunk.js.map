{"version":3,"sources":["components/Header.jsx","routes.js","decorators/CustomLoader.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","props","useState","isOpen","setIsOpen","Fragment","Navbar","color","light","expand","NavbarBrand","NavbarToggler","onClick","Collapse","navbar","Nav","className","NavItem","NavLink","style","to","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","DropdownMenu","right","DropdownItem","href","target","Main","React","lazy","routes","path","exact","name","component","CustomLoader","size","margin","App","Suspense","fallback","map","route","idx","key","render","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mWAuEeA,EAvDA,SAACC,GAAU,MAEIC,oBAAS,GAFb,mBAEjBC,EAFiB,KAETC,EAFS,KAKxB,OACE,kBAAC,IAAMC,SAAP,KACE,kBAACC,EAAA,EAAD,CAAQC,MAAM,QAAQC,OAAK,EAACC,OAAO,MACjC,kBAACC,EAAA,EAAD,sBACA,kBAACC,EAAA,EAAD,CAAeC,QANN,kBAAMR,GAAWD,MAO1B,kBAACU,EAAA,EAAD,CAAUV,OAAQA,EAASW,QAAM,GAC/B,kBAACC,EAAA,EAAD,CAAKC,UAAU,UAAUF,QAAM,GAC7B,kBAACG,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAAC,IAAD,CAAMC,MAAO,CAACZ,MAAM,WAAYa,GAAG,WAAnC,YAGJ,kBAACH,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAAC,IAAD,CAAMC,MAAO,CAACZ,MAAM,WAAYa,GAAG,aAAnC,cAGJ,kBAACC,EAAA,EAAD,CAAsBC,KAAG,EAACC,UAAQ,GAChC,kBAACC,EAAA,EAAD,CAAgBF,KAAG,EAACG,OAAK,GAAzB,YAGA,kBAACC,EAAA,EAAD,CAAcC,OAAK,GACjB,kBAACC,EAAA,EAAD,KACE,kBAACV,EAAA,EAAD,CAASW,KAAK,4DAA4DC,OAAO,UAAjF,aAIF,kBAACF,EAAA,EAAD,KACE,kBAACV,EAAA,EAAD,CACEW,KAAK,oCACLC,OAAO,UAFT,cAOF,kBAACF,EAAA,EAAD,KACE,kBAACV,EAAA,EAAD,CAASW,KAAK,6BAA6BC,OAAO,UAAlD,iB,OCvDZC,EAAOC,IAAMC,MAAK,kBAAM,iCAQfC,EALA,CACX,CAAEC,KAAM,YAAaC,OAAO,EAAMC,KAAM,WAAYC,UAHvCN,IAAMC,MAAK,kBAAM,wDAI9B,CAAEE,KAAM,UAAWC,OAAO,EAAMC,KAAM,SAAUC,UAAWP,I,iBCEhDQ,EANM,kBACnB,yBAAKvB,UAAU,gBACb,kBAAC,IAAD,CAAYwB,KAAM,GAAIC,OAAQ,EAAGlC,MAAO,c,kBCiC7BmC,MA5Bf,WAGE,OACE,yBAAK1B,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,IAAM2B,SAAP,CAAgBC,SALA,kBAAC,EAAD,OAMd,kBAAC,EAAD,MACA,kBAAC,IAAD,KACGV,EAAOW,KAAI,SAACC,EAAOC,GAClB,OAAOD,EAAMR,UACX,kBAAC,IAAD,CACEU,IAAKD,EACLZ,KAAMW,EAAMX,KACZC,MAAOU,EAAMV,MACbC,KAAMS,EAAMT,KACZY,OAAQ,kBAAM,kBAACH,EAAMR,UAAP,SAEd,QAEN,kBAAC,IAAD,CAAOU,IAAI,iBAAiBC,OAAQ,kBAAM,kBAAC,IAAD,CAAU7B,GAAG,oBClB/C8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASN,OACP,kBAAC,IAAMO,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1d868299.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\n  Nav,\r\n  Navbar,\r\n  NavLink,\r\n  Collapse,\r\n  UncontrolledDropdown,\r\n  DropdownToggle,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  NavbarBrand,\r\n  NavbarToggler,\r\n  NavItem,\r\n} from \"reactstrap\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Header = (props) => {\r\n  //Hooks para el navbar\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const toggle = () => setIsOpen(!isOpen);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Navbar color=\"light\" light expand=\"md\">\r\n        <NavbarBrand>RÃ­os Brian</NavbarBrand>\r\n        <NavbarToggler onClick={toggle} />\r\n        <Collapse isOpen={isOpen}  navbar>\r\n          <Nav className=\"mr-auto\" navbar>\r\n            <NavItem>\r\n              <NavLink>\r\n                <Link style={{color:\"inherit\"}} to=\"/inicio\">Inicio</Link>\r\n              </NavLink>\r\n            </NavItem>\r\n            <NavItem>\r\n              <NavLink>\r\n                <Link style={{color:\"inherit\"}} to=\"/timeline\">Timeline</Link>\r\n              </NavLink>\r\n            </NavItem>\r\n            <UncontrolledDropdown nav inNavbar>\r\n              <DropdownToggle nav caret>\r\n                Contacto\r\n              </DropdownToggle>\r\n              <DropdownMenu right>\r\n                <DropdownItem>\r\n                  <NavLink href=\"https://www.linkedin.com/in/brian-antonio-rios-a259b1133/\" target=\"_blank\">\r\n                    LinkedIn\r\n                  </NavLink>\r\n                </DropdownItem>\r\n                <DropdownItem>\r\n                  <NavLink\r\n                    href=\"https://www.instagram.com/lbokrug\"\r\n                    target=\"_blank\"\r\n                  >\r\n                    Instagram\r\n                  </NavLink>\r\n                </DropdownItem>\r\n                <DropdownItem>\r\n                  <NavLink href=\"mailto:rios.ba95@gmail.com\" target=\"_blank\">\r\n                    Gmail\r\n                  </NavLink>\r\n                </DropdownItem>\r\n              </DropdownMenu>\r\n            </UncontrolledDropdown>\r\n          </Nav>\r\n          {/* <NavbarText>Simple Text</NavbarText> */}\r\n        </Collapse>\r\n      </Navbar>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nconst Main = React.lazy(() => import(\"./components/Main\"));\r\nconst Timeline = React.lazy(() => import(\"./components/Timeline\"));\r\n\r\nconst routes = [\r\n    { path: \"/timeline\", exact: true, name: \"Timeline\", component: Timeline },\r\n    { path: \"/inicio\", exact: true, name: \"Inicio\", component: Main },\r\n];\r\n\r\nexport default routes;\r\n","import React from \"react\";\r\nimport PuffLoader from \"react-spinners/PuffLoader\";\r\n\r\nconst CustomLoader = () => (\r\n  <div className=\"spinnerStyle\">\r\n    <PuffLoader size={60} margin={2} color={\"#3A4692\"} />\r\n  </div>\r\n);\r\n\r\nexport default CustomLoader;\r\n","import React from \"react\";\nimport Header from \"./components/Header.jsx\";\nimport { Switch, Route, Redirect, HashRouter } from \"react-router-dom\";\nimport routes from \"./routes\";\nimport CustomLoader from './decorators/CustomLoader.jsx';\n// Styles\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"font-awesome/css/font-awesome.min.css\";\n\nfunction App() {\n  const loading = () => <CustomLoader />;\n\n  return (\n    <div className=\"App\">\n      <HashRouter>\n        <React.Suspense fallback={loading()}>\n          <Header />\n          <Switch>\n            {routes.map((route, idx) => {\n              return route.component ? (\n                <Route\n                  key={idx}\n                  path={route.path}\n                  exact={route.exact}\n                  name={route.name}\n                  render={() => <route.component />}\n                />\n              ) : null;\n            })}\n            <Route key=\"no-match-route\" render={() => <Redirect to=\"/inicio\" />} />\n          </Switch>\n        </React.Suspense>\n      </HashRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}